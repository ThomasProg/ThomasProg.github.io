<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Projects on Prog'z</title><link>https://thomasprog.github.io/projects/index.html</link><description>Recent content in Projects on Prog'z</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 11 Dec 2022 17:25:53 +0100</lastBuildDate><atom:link href="https://thomasprog.github.io/projects/index.xml" rel="self" type="application/rss+xml"/><item><title>AI Movement</title><link>https://thomasprog.github.io/projects/ai-movement/index.html</link><pubDate>Thu, 05 Jan 2023 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/ai-movement/index.html</guid><description> AI Movement Move AIs in a cool way Code Article Description The goal of this project was to implement AI movements from scratch, whether it is group mouvement or path finding.
Tools C# Unity 3D (for rendering)
My work Path Finding:
Navmesh / Navigation graph A* algorithm implementation Dijkstra algorithm implementation Steering behavior for groups:
Alignement Cohesion Separation Steering Behaviour</description></item><item><title>Chess Multi</title><link>https://thomasprog.github.io/projects/chessmulti/index.html</link><pubDate>Thu, 05 Jan 2023 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/chessmulti/index.html</guid><description> Chess Multi TCP &amp; UDP protocols Code Article Description A multiplayer chess game. A player can make a server, and the other join by ip. There can be spectators. Players can send messages. The board is updated to all clients. The goal of this project was to learn how TCP and UDP communications work.
Tools Programming:
C# Unity 3D My work Programming:
Server / Client connection Replications (Chess Moves, Score, Game Over) Data serialization for network</description></item><item><title>Ghosty</title><link>https://thomasprog.github.io/projects/ghosty/index.html</link><pubDate>Thu, 05 Jan 2023 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/ghosty/index.html</guid><description> Ghosty Take care of Ghosty and its family! Play Ghosty on itch.io Play Code Article Description Ghosty is a game where you have to take care of the needs of the ghosts. The goal of this project was to learn about AI / Utility Systems. Made in 2 days.
Tools Programming:
C# Unity 3D My work AI :
Blackboard Utility Systems (needs / emotions), modifiable with curves</description></item><item><title>Magnum</title><link>https://thomasprog.github.io/projects/magnum/index.html</link><pubDate>Thu, 05 Jan 2023 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/magnum/index.html</guid><description> Magnum Exploring an already existing engine Code Article Description Development of a game and foccus on the Camera, Character and the Controller. an engine without an editor. Reimplementations of std::vector, std::list and std::string. The goal of this project was to learn about C++.
Tools Programming:
C++</description></item><item><title>MiniMax</title><link>https://thomasprog.github.io/projects/minimax/index.html</link><pubDate>Thu, 05 Jan 2023 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/minimax/index.html</guid><description>MiniMax An AI for board games Code Article Description Implementation of the MiniMax algorithm, tested on a TicTacToe. The goal of the MiniMax algorithm is to play the best move given a current board. For that, the algorithm will compute future moves, until a given depth is reached. Pruning can be used to optimize performance and not compute every possible move. This is a famous algorithm in board games, but can also be used elsewhere.</description></item><item><title>Neural Network</title><link>https://thomasprog.github.io/projects/neuralnetwork/index.html</link><pubDate>Thu, 05 Jan 2023 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/neuralnetwork/index.html</guid><description>Neural Network Teach what you don't know Code Article Description The goal of this project was to understand how a neural network can be implemented and how to use it. A custom neural network has been made. An already existing one, ML Agents, have been used to teach an agent how to move, press a button, etc.
Tools C# Unity 3D (for rendering)
My work Custom Neural Network:
Perceptrons Perceptron layers Forward propagation (Feedforward) Back propagation Other:</description></item><item><title>Sort Algorithm</title><link>https://thomasprog.github.io/projects/sortalgorithms/index.html</link><pubDate>Thu, 05 Jan 2023 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/sortalgorithms/index.html</guid><description> Sort Algorithm Improve the speed! Code Article Description The goal of this project was to learn how sort containers and how to optimize search.
Tools C
My work Sorting Algorithms:
Navmesh / Navigation graph A Star algorithm implementation Dijkstra algorithm implementation Steering behavior for groups Other:
Binary Search Tree Dichotomic search</description></item><item><title>Twin Stick Shooter Multi</title><link>https://thomasprog.github.io/projects/twinstickshootermulti/index.html</link><pubDate>Thu, 05 Jan 2023 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/twinstickshootermulti/index.html</guid><description> Twin Stick Shooter Multi Network on Unreal Engine Code Article Description Replication of a game inspired from Twin Stick Shooter. The goal of this project was to learn how RPCs and replicated variables work, and Unreal Engine&amp;rsquo;s classes roles for networking.
Tools Programming:
C++ Unreal Engine 4 My work Programming:
Lobby with Seamless travel Movement &amp;amp; Shoot replications Name &amp;amp; Color replication</description></item><item><title>Vector &amp; List</title><link>https://thomasprog.github.io/projects/vectorandlist/index.html</link><pubDate>Thu, 05 Jan 2023 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/vectorandlist/index.html</guid><description> Vector &amp; List Implementing containers Code Article Description Reimplementations of std::vector, std::list and std::string. The goal of this project was to learn about C++.
Tools Programming:
C++</description></item><item><title>2D Physics Engine</title><link>https://thomasprog.github.io/projects/physicsengine/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/physicsengine/index.html</guid><description> 2D Physics Engine Real time Physics Engine Article Tutorials Description The goal of this project was to learn how the different phases of a physics engine. Tutorials are available on the website.
Tools Programming:
C++ Git My work Broad Phases:
Bounding Volumes (AABB / Circles) Grid Quad Tree Sweep And Prune Narrow Phases:
Separating Axis Test GJK + EPA Reactions:
Constraints Position / Rotation / Velocity reactions Friction</description></item><item><title>3D Skeletal Animations</title><link>https://thomasprog.github.io/projects/3d-animations/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/3d-animations/index.html</guid><description> 3D Skeletal Animations Make characters come to life! Code Article Description This project contains implementation of 3D Skeletal Animations. Animations are also interpolated between different keyframes and when switching between each other.
Tools Libraries:
GLFW 3.3.2 Dear ImGui OpenGL Core 4.6 &amp;amp; GLSL 4.60.5 glad with GL_KHR_Debug Other:
C++ Git Discord Members Programmers:
Thomas Dallard Anatole Todorov My work Animation Programming:
Skinning Rigging Keyframe interpolations Animation interpolations</description></item><item><title>Aphrodite's Rendering Engine</title><link>https://thomasprog.github.io/projects/aphroditesrenderingengine/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/aphroditesrenderingengine/index.html</guid><description> Aphrodite's Rendering Engine Vulkan Tutorials Code Article Playlist Description Aphrodite&amp;rsquo;s Rendering Engine is a Rendering Engine made for games with Vulkan in C++. The whole development of this engine is explained on youtube.
Tools Vulkan CMake Git C++ GLSL My work Project setup with CMake Vulkan Engine Explaining code Video editing</description></item><item><title>Bim!Ball</title><link>https://thomasprog.github.io/projects/bimball/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/bimball/index.html</guid><description>Bim!Ball A 3D Brawler Play Code Article Description Bim!Ball is a brutal 3D brawler plunged in the frenzy of american football. In a wild arena, you embody the unforgiving knighterback, an absolute brute set to score a touchdown at any cost and mixing it up with whoever would end up on his way&amp;hellip; But be sure to keep the ball in your hands otherwise, you may concede a reverse touchdown &amp;amp; lose the game !</description></item><item><title>Distorsion</title><link>https://thomasprog.github.io/projects/distorsion/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/distorsion/index.html</guid><description> Distorsion Control the time Play Code Article Description Distorsion is a puzzle game where you can control the time. Finish all levels to end the game. Tools Programming:
Unreal Engine Visual Studio C++ Blueprints My work Mechanics:
Magnetism Sphere throwing Freezing time Reverse time Slowing / Accelerating time (interpolated to make movements smooth) Buttons and interactibles Laser Laser reflections</description></item><item><title>Dragon Chess</title><link>https://thomasprog.github.io/projects/dragonchess/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/dragonchess/index.html</guid><description> Dragon Chess Blueprints Stream Tutorial : Chess Code Article Playlist Description Dragon Chess is a playlist of youtube streams to make a chess game in Blueprints on Unreal Engine.
Tools Programming:
Unreal Engine Blueprints Please enable JavaScript to view the comments powered by Disqus.</description></item><item><title>Dragon's Tower</title><link>https://thomasprog.github.io/projects/dragonstower/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/dragonstower/index.html</guid><description> Dragon's Tower Defeat the dragon Play Code Article Description Dragon&amp;rsquo;s Tower is a 3D platformer made entirely in Blueprints.
Tools Unreal Engine 4 Blueprints My work Programming:
Particles Attack mechanics Movement mechanics simple AIs + Boss AI (Behavior Tree) Saved score system Other:
Code explainations</description></item><item><title>Forest</title><link>https://thomasprog.github.io/projects/forest/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/forest/index.html</guid><description> Forest Enter the forest and discover its mysteries... Play Code Article Description Forest is a 3D interactive environment. This project is the result of a collaboration between artists and programmers to explore Tech Art.
Tools Unreal Engine 4.26.2 Perforce Microsoft Teams Members [Programmer] Thomas Dallard [Programmer] William Nardone [3D Artist] Valentine Collino [3D Artist] Loïc Rinjard
My work Water material Underwater effect Leaf particles Procedural rotten leaves generation Stylistic fog Light management (light shaft, rotation&amp;hellip;) Birds Crack effects Some transitions</description></item><item><title>France IOI</title><link>https://thomasprog.github.io/projects/france-ioi/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/france-ioi/index.html</guid><description> France IOI Explicative videos for Python Exercises Code Article Playlist Description France IOI is an online platform for learning how to code. It works by resolving exercises. However, some basic explanations are missing, and those stuck have no good and easy ways to go forward. This playlist has been made to help people learning, and to fill the lacks of France IOI.
Tools France IOI Repl.it Resolve Davinci Git My work Algorithms Explaining code Video editing</description></item><item><title>Gladiator</title><link>https://thomasprog.github.io/projects/gladiator/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/gladiator/index.html</guid><description> Gladiator Fight in the Arena Code Article Description A game where you have to fight in the arena the different waves of enemies to win. The purpose of this project was to learn how to make AIs work in groups.
Tools Unreal Engine 4 C++</description></item><item><title>GP Engine</title><link>https://thomasprog.github.io/projects/gp-engine/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/gp-engine/index.html</guid><description>GP Engine A game engine with an editor Play Code Article Description GP Engine is a 3D Video Game Engine. The engine contains :
An editor Scenes, that can be loaded and saved Prefabs, that can be saved and modified The inspector, to edit objects or prefabs A scene graph to make objects transformations dependant on other objects 3D Physics Editable Particles Hot Reload, to modify the code without closing the editor Spatialized Audio 3D Skeletal Animations Assets loading Ingame UI Editor configurations 3D Rendering &amp;amp; optimizations Shadows Custom math library A game has also been made to test the engine.</description></item><item><title>Janus Task System</title><link>https://thomasprog.github.io/projects/janustasksystem/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/janustasksystem/index.html</guid><description> Janus Task System Multithreaded Tasks Code Article Description Janus Task System is a C++ library containing implementations for std::function replacement.
Tools Programming:
C++</description></item><item><title>Labyrinth'z</title><link>https://thomasprog.github.io/projects/labyrinthz/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/labyrinthz/index.html</guid><description> Labyrinth'z Find the end! Article Description A labyrinth is randomly generated. Your goal is to take all the circles with your mouse, while avoiding the white zone. Then, you have to reach the end and get out of it! Good luck!
Tools Python</description></item><item><title>Legacy OpenGL</title><link>https://thomasprog.github.io/projects/legacyopengl/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/legacyopengl/index.html</guid><description> Legacy OpenGL An introduction to rendering apis Code Article Description The goal of this project was to learn about OpenGL Legacy (before 3.3). This includes 4 sub projects:
getting used to basics with 2D shapes, with interpolations upgrading to 3D, with lighting and transforms, and textures making Minecraft (because&amp;hellip; why not) making a Tower Game Tools Programming:
OpenGL 3.1 My work Programming:
Generating 2D polygons and circles Generating 3D cones and spheres Making object and camera transformations Putting textures on objects Generating chunks Camera movements Phong lighting model (by vertex) Directional light, Point light, Spot light</description></item><item><title>Malloc &amp; Free</title><link>https://thomasprog.github.io/projects/mallocandfree/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/mallocandfree/index.html</guid><description> Malloc &amp; Free Managing memory Code Article Description Malloc &amp;amp; Free is a project aimed to learn how dynamic allocations work. It is a reimplementation of malloc() and free() on Linux, with brk() / sbrk().
Tools Programming:
C Git My work Programming:
Free List Custom Malloc Custom Calloc Custom Realloc Custom Memedit Custom valgrind-like debug</description></item><item><title>Memory Soup</title><link>https://thomasprog.github.io/projects/memorysoup/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/memorysoup/index.html</guid><description> Memory Soup Increase performance easily Code Article Description Dynamic allocations are known to be slow. MemorySoup is a library containing different classes to improve their performance. Tests have concluded it can increase performance by x10 times. Data cache can also be taken into account.
Tools Programming:
C++ My work Programming:
Free list Unrolled list Memory Management</description></item><item><title>Minecraft Plugins</title><link>https://thomasprog.github.io/projects/minecraftplugins/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/minecraftplugins/index.html</guid><description>Minecraft Plugins Mods for Minecraft Servers Code Article Playlist Description As I hosted a Minecraft Server for me and my youtube community, me and my friend developed plugins to manage the server, such as handling the login, or to make custom events. Some tutorials have also been made in a stream.
Tools Java SQL Spigot Library Git Eclipse / Visual Studio Code + Maven Members Programmers:
Thomas Dallard Meltwin My work Programming:</description></item><item><title>Minestorm</title><link>https://thomasprog.github.io/projects/minestorm/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/minestorm/index.html</guid><description> Minestorm 2D collisions Code Article Description Inspired from the Minestorm game, the goal of this project was to learn how to make collisions and basic physics in a 2D game.
Tools Programming:
C Git My work Programming:
Referential changes functions Velocity / Friction / Drift physics Separating Axis Theorem implementation AABB collisions</description></item><item><title>Nintendo Switch Port</title><link>https://thomasprog.github.io/projects/nintendo-switch-port/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/nintendo-switch-port/index.html</guid><description> Nintendo Switch Port Real time networking Code Article Description Porting a game on Nintendo Switch.
Tools Programming:
C# Unity Nintendo Switch api for Unity Nintendo Switch devkit (+ documentation) Other:
Discord Git Trello Members Programmers:
Thomas Dallard Anatole Todorov Game Designers &amp;amp; Programmers:
Julian Cathelinais Léonard Fétis Joéva Fombaron My work Programming:
Vibrations Inputs Gameplay features</description></item><item><title>Non Euclidean World</title><link>https://thomasprog.github.io/projects/noneuclideanopengl/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/noneuclideanopengl/index.html</guid><description> Non Euclidean OpenGL See the world... differently Code Article Description This project was originally supposed to learn the basics of Modern OpenGL (3.3+). However, as I am fond of non euclidean effects, I ended up implementing them.
Tools Programming:
OpenGL 3.3+</description></item><item><title>Padoru Game</title><link>https://thomasprog.github.io/projects/padorugame/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/padorugame/index.html</guid><description> Padoru Game Hashire sori yo... Code Article Playlist Description Padoru Game is a game with the famous Padoru meme as the theme. This game was made on a livestream to explain how to make a simple game in C++ with SDL. Rediffusions are available.
Tools C++ SDL Please enable JavaScript to view the comments powered by Disqus.</description></item><item><title>Projection</title><link>https://thomasprog.github.io/projects/projection/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/projection/index.html</guid><description> Projection A 2.5D Platformer Play Code Article Description PROJECTION is a 2.5D action game which mixes puzzle and platforming. Tools Unity Trello Git Discord Members Programmers:
Thomas Dallard Jonathan Six Sami Amara Game Designers:
Jérémy Becica Mathilde Conte Corto Garnier Victor Durel Thibault Wegner My work Programming:
Player skills Gameplay bricks</description></item><item><title>Rasterizer</title><link>https://thomasprog.github.io/projects/rasterizer/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/rasterizer/index.html</guid><description>Rasterizer The drawing pipeline from zero Code Article Description The goal of this project was to learn how graphic apis such as OpenGL worked under the hood. The whole drawing pipeline has been remade on the GPU. All pixels are drawn in a 2D buffer, that is sent to SDL for display to the screen only.
Tools C++ SDL (but only to render pixels from an array) Members Programmers:</description></item><item><title>RTS AI</title><link>https://thomasprog.github.io/projects/rts-ai/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/rts-ai/index.html</guid><description> RTS AI Destroy the AI Article conference Description This is a Real Time Strategy game. Capture points to make more troops and destroy the enemy building. The enemy is controlled by an AI. The goal of this project was to make the human able to make strategies, tactics, and acting like a human. The AI was presented at a conference of the GT-IA.
Tools Unity Trello Git Discord Members Thomas Dallard Jonathan Six Baptiste Suzon My work Technical Design Document (TDD) Tactical Layer Strategy Layer Difficulty variations</description></item><item><title>Shout Cells Up</title><link>https://thomasprog.github.io/projects/shootcellsup/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/shootcellsup/index.html</guid><description>Shout Cells Up Kill cancerous cells Play Code Article Description Shoot-Cells-Up is a game where you have to kill the most cancerous cells with a laser by clicking on them. But be careful to not destroy the good cells! This was made in the Scientific Game Jam in 2 days. The goal of this project was to explain a research through a video game.
Tools Programming:
Unity Visual Studio Members Programmer:</description></item><item><title>Snake Tutorials</title><link>https://thomasprog.github.io/projects/snaketutorials/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/snaketutorials/index.html</guid><description> Snake Tutorials SDL Tutorial : Snake Code Article Playlist Description Snake Tutorials is a playlist of youtube videos to make a Snake in C++ with SDL.
Tools Programming:
C++ SDL Other:
Tutorial &amp;amp; Architecture planning Code explainations Please enable JavaScript to view the comments powered by Disqus.</description></item><item><title>Spy Catcher</title><link>https://thomasprog.github.io/projects/spycatcher/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/spycatcher/index.html</guid><description>Spy Catcher Find the spies Play Spy Catcher on itch.io Play Code Article Description Inspired from Papers Please, you have to inspect documents, and find the incorrect ones. This game was made in a game jam of 1 week.
Tools Unity Git Discord Members [GP] Thomas Dallard [GD] Zineddine Nouari [MS] Daniel Gardebien [GA] Shannon Décaillon [GA] Aurélie Chen [GA] Alexandre Katif [GA] Léa Hinard My work Assets integration Drag &amp;amp; drop Comparison system</description></item><item><title>Tiny Wolf</title><link>https://thomasprog.github.io/projects/tinywolf/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/tinywolf/index.html</guid><description> Tiny Wolf Fly high Play Tiny wolf on itch.io Play Code Article Description Inspired from Tiny Wings, The goal of the game is to go higher and higher. Tiny Wolf is procedurally generated with different types of curves. Collisions are handmade.
Tools Programming:
Unity C# HLSL Visual Studio Other:
Git Discord Members Programmers:
Thomas Dallard Nicolas Deprez My work Maths derivations and equations Collisions Procedural generation Forces management</description></item><item><title>Tower Defense Tutorials</title><link>https://thomasprog.github.io/projects/towerdefensetutorials/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/towerdefensetutorials/index.html</guid><description> Tower Defense Tutorials Blueprints Tutorial : Tower Defense Code Article Playlist Description Tower Defense Tutorials is a playlist of stream tutorials made to show how to make a Tower Defense in Blueprints on Unreal Engine 4.
Tools Programming:
Unreal Engine Blueprints Other:
Code explainations</description></item><item><title>TPS Multi</title><link>https://thomasprog.github.io/projects/tps-multi/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/tps-multi/index.html</guid><description>TPS Multi Real time networking Code Article Description The goal of this project was to add multiplayer to a Third Person Shooter. Players can join the same session via a lobby. Simple AIs are spawned periodically, chasing the players. The players can shoot zombies or other players. Health, shoots, death, respawn, and visual / audio effects are replicated. Items can be taken by players, and are also replicated.
Tools Programming:</description></item><item><title>Voxel'z</title><link>https://thomasprog.github.io/projects/voxelz/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/voxelz/index.html</guid><description> Voxel'z Infinite world Code Article Description Voxel&amp;rsquo;z is a Minecraft clone. The whole world is infinitely procedurally generated.
Tools Programming:
Unreal Engine Visual Studio My work Programming:
Procedural generation of mountains / caves Biomes Inventory System Moving Leaves effect Ores made by proportions Vehicle System (allowing vehicles blocks to have independant rotations) Blocks to have different sizes Simple enemy slime AI UI Dialogue &amp;amp; interactions</description></item><item><title>Watermelon Matrix</title><link>https://thomasprog.github.io/projects/watermelonmatrix/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/watermelonmatrix/index.html</guid><description>Watermelon Matrix Matrices at compile time Code Article Description Watermelon Matrix is a C++ library containing implementations for vectors and matrices. All functions are runnable at compile time, even complex ones such as the inverse function. This library was made as a way to explore template mechanics. It includes :
CRTP (Curiously Recurring Template Programming) SFINAE (Substitution Failure is not an Error) Template specialization Explicit template instantiation Tools Programming:</description></item><item><title>Wild Dogs</title><link>https://thomasprog.github.io/projects/wilddogs/index.html</link><pubDate>Sun, 11 Dec 2022 17:25:53 +0100</pubDate><guid>https://thomasprog.github.io/projects/wilddogs/index.html</guid><description>Wild Dogs A custom game on a custom engine Code Article Description The goal of this project was to make our custom engine and make a game on top of it.
Tools C++ OpenGL 3.3+ OpenAL Members Programmers:
Jérémy Grondin Thomas Dallard Amélie Pichard My work Physics:
Player physics Custom collisions Rendering:
Physics Forward Rendering Blinn Phong Audio:
.wav parser Running sounds with OpenAL Recording incredible sound effects Other:</description></item></channel></rss>